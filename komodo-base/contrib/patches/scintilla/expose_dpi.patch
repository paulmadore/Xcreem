From 62a8775333354b5a563a5d3ee586b996a29f3cab Mon Sep 17 00:00:00 2001
From: Mark Yen <marky+git@activestate.com>
Date: Thu, 24 Oct 2013 12:25:38 -0700
Subject: [PATCH] scintilla: expose logical pixels per inch in the API

This is normally 72 on OSX, and 96 on Win32/Linux; this value may be
different on high DPI displays.
---
 cocoa/PlatCocoa.h         |  1 +
 cocoa/PlatCocoa.mm        | 12 ++++++++++++
 gtk/PlatGTK.cxx           |  9 +++++++--
 headless/PlatHeadless.cxx |  5 +++++
 include/Platform.h        |  1 +
 include/Scintilla.iface   |  4 ++++
 src/Editor.cxx            | 16 ++++++++++++++++
 win32/PlatWin.cxx         | 17 +++++++++++++++--
 8 files changed, 61 insertions(+), 4 deletions(-)

diff --git cocoa/PlatCocoa.h cocoa/PlatCocoa.h
index 5801770..bf8df6e 100644
--- cocoa/PlatCocoa.h
+++ cocoa/PlatCocoa.h
@@ -82,6 +82,7 @@ public:
   CGImageRef GetImage();
   void CopyImageRectangle(Surface &surfaceSource, PRectangle srcRect, PRectangle dstRect);
 
+  int LogPixelsX();
   int LogPixelsY();
   int DeviceHeightFont(int points);
   void MoveTo(int x_, int y_);
diff --git cocoa/PlatCocoa.mm cocoa/PlatCocoa.mm
index 69eb160..e291ae4 100644
--- cocoa/PlatCocoa.mm
+++ cocoa/PlatCocoa.mm
@@ -351,6 +351,18 @@ CGImageRef SurfaceImpl::GetImage()
 //--------------------------------------------------------------------------------------------------
 
 /**
+ * Returns the horizontal logical device resolution of the main monitor.
+ * This is no longer called.
+ * For Cocoa, all screens are treated as 72 DPI, even retina displays.
+ */
+int SurfaceImpl::LogPixelsX()
+{
+  return 72;
+}
+
+//--------------------------------------------------------------------------------------------------
+
+/**
  * Returns the vertical logical device resolution of the main monitor.
  * This is no longer called.
  * For Cocoa, all screens are treated as 72 DPI, even retina displays.
diff --git gtk/PlatGTK.cxx gtk/PlatGTK.cxx
index a6ae84e..b6b2117 100644
--- gtk/PlatGTK.cxx
+++ gtk/PlatGTK.cxx
@@ -393,6 +393,7 @@ public:
 	void Release();
 	bool Initialised();
 	void PenColour(ColourDesired fore);
+	int LogPixelsX();
 	int LogPixelsY();
 	int DeviceHeightFont(int points);
 	void MoveTo(int x_, int y_);
@@ -604,13 +605,17 @@ void SurfaceImpl::PenColour(ColourDesired fore) {
 	}
 }
 
+int SurfaceImpl::LogPixelsX() {
+	return gdk_screen_get_resolution(gdk_screen_get_default());
+}
+
 int SurfaceImpl::LogPixelsY() {
-	return 72;
+	return gdk_screen_get_resolution(gdk_screen_get_default());
 }
 
 int SurfaceImpl::DeviceHeightFont(int points) {
 	int logPix = LogPixelsY();
-	return (points * logPix + logPix / 2) / 72;
+	return (points * logPix + logPix / 2) / 96;
 }
 
 void SurfaceImpl::MoveTo(int x_, int y_) {
diff --git headless/PlatHeadless.cxx headless/PlatHeadless.cxx
index 6a8fdad..de29676 100644
--- headless/PlatHeadless.cxx
+++ headless/PlatHeadless.cxx
@@ -67,6 +67,7 @@ public:
 	void Release();
 	bool Initialised();
 	void PenColour(ColourDesired fore);
+	int LogPixelsX();
 	int LogPixelsY();
 	int DeviceHeightFont(int points);
 	void MoveTo(int x_, int y_);
@@ -148,6 +149,10 @@ void SurfaceImpl::InitPixMap(int width, int height, Surface *surface_, WindowID
 void SurfaceImpl::PenColour(ColourDesired fore) {
 }
 
+int SurfaceImpl::LogPixelsX() {
+	return 72;
+}
+
 int SurfaceImpl::LogPixelsY() {
 	return 72;
 }
diff --git include/Platform.h include/Platform.h
index 36b0c41..80dfeec 100644
--- include/Platform.h
+++ include/Platform.h
@@ -312,6 +312,7 @@ public:
 	virtual void Release()=0;
 	virtual bool Initialised()=0;
 	virtual void PenColour(ColourDesired fore)=0;
+	virtual int LogPixelsX()=0;
 	virtual int LogPixelsY()=0;
 	virtual int DeviceHeightFont(int points)=0;
 	virtual void MoveTo(int x_, int y_)=0;
diff --git include/Scintilla.iface include/Scintilla.iface
index e144a96..2a08e9c 100644
--- include/Scintilla.iface
+++ include/Scintilla.iface
@@ -2418,6 +2418,10 @@ get bool GetSuppressDragDrop=5011(,)
 set void SetSuppressZoomOnScrollWheel=5012(bool suppressZoomOnScrollWheel,)
 get bool GetSuppressZoomOnScrollWheel=5013(,)
 
+# Get the number of logical pixels per inch, in the X and Y directions
+get int GetLogPixelsX=5014(,)
+get int GetLogPixelsY=5015(,)
+
 # For private communication between an application and a known lexer.
 fun int PrivateLexerCall=4013(int operation, int pointer)
 
index 1c25ed0..fe1ac2e 100644
--- src/Editor.cxx
+++ src/Editor.cxx
@@ -7221,6 +7221,22 @@ sptr_t Editor::WndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam) {
 
 	case SCI_GETPASTECONVERTENDINGS:
 		return convertPastes ? 1 : 0;
+	
+	case SCI_GETLOGPIXELSX: { // bug 100492
+			AutoSurface surface(this);
+			if (surface) {
+				return surface->LogPixelsX();
+			}
+			return 72;
+		}
+
+	case SCI_GETLOGPIXELSY: { // bug 100492
+			AutoSurface surface(this);
+			if (surface) {
+				return surface->LogPixelsY();
+			}
+			return 72;
+		}
 
 	case SCI_GETCHARACTERPOINTER:
 		return reinterpret_cast<sptr_t>(pdoc->BufferPointer());

diff --git win32/PlatWin.cxx win32/PlatWin.cxx
index e92ef94..3cd5873 100644
--- win32/PlatWin.cxx
+++ win32/PlatWin.cxx
@@ -537,6 +537,7 @@ public:
 	void Release();
 	bool Initialised();
 	void PenColour(ColourDesired fore);
+	int LogPixelsX();
 	int LogPixelsY();
 	int DeviceHeightFont(int points);
 	void MoveTo(int x_, int y_);
@@ -693,6 +694,10 @@ void SurfaceGDI::SetFont(Font &font_) {
 	}
 }
 
+int SurfaceGDI::LogPixelsX() {
+	return ::GetDeviceCaps(hdc, LOGPIXELSX);
+}
+
 int SurfaceGDI::LogPixelsY() {
 	return ::GetDeviceCaps(hdc, LOGPIXELSY);
 }
@@ -1168,6 +1173,7 @@ class SurfaceD2D : public Surface {
 
 	ID2D1SolidColorBrush *pBrush;
 
+	int logPixelsX;
 	int logPixelsY;
 	float dpiScaleX;
 	float dpiScaleY;
@@ -1193,6 +1199,7 @@ public:
 
 	void PenColour(ColourDesired fore);
 	void D2DPenColour(ColourDesired fore, int alpha=255);
+	int LogPixelsX();
 	int LogPixelsY();
 	int DeviceHeightFont(int points);
 	void MoveTo(int x_, int y_);
@@ -1252,7 +1259,8 @@ SurfaceD2D::SurfaceD2D() :
 
 	pBrush = NULL;
 
-	logPixelsY = 72;
+	logPixelsX = 96;
+	logPixelsY = 96;
 	dpiScaleX = 1.0;
 	dpiScaleY = 1.0;
 }
@@ -1280,8 +1288,9 @@ void SurfaceD2D::Release() {
 
 void SurfaceD2D::SetScale() {
 	HDC hdcMeasure = ::CreateCompatibleDC(NULL);
+	logPixelsX = ::GetDeviceCaps(hdcMeasure, LOGPIXELSX);
 	logPixelsY = ::GetDeviceCaps(hdcMeasure, LOGPIXELSY);
-	dpiScaleX = ::GetDeviceCaps(hdcMeasure, LOGPIXELSX) / 96.0f;
+	dpiScaleX = logPixelsX / 96.0f;
 	dpiScaleY = logPixelsY / 96.0f;
 	::DeleteDC(hdcMeasure);
 }
@@ -1361,6 +1370,10 @@ void SurfaceD2D::SetFont(Font &font_) {
 	}
 }
 
+int SurfaceD2D::LogPixelsX() {
+	return logPixelsX;
+}
+
 int SurfaceD2D::LogPixelsY() {
 	return logPixelsY;
 }
-- 
1.8.1.msysgit.1

