<?xml version="1.0"?>
<!DOCTYPE dialog PUBLIC "-//MOZILLA//DTD XUL V1.0//EN" "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
  - Template for floating widget panes.
  - This window takes the follwing arguments:
  -     - an initializer (run before load), taking arguments
  -         - this window
  -     - an onload handler, taking arguments
  -         - the <ko-pane>
  -->

<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://komodo/skin/bindings/widgets.css" type="text/css"?>
<?xml-stylesheet href="chrome://komodo/skin/" type="text/css"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        orient="vertical" id="floating-pane">
    <script>
        try {
            window.arguments[0](window);
        } catch (ex) {
            Components.utils.reportError(ex);
        }
    </script>
    <!-- We force the pane to not have a XBL binding now, and clear it (and pick
       - up the right binding from widgets.css) in the load event handler, so
       - that we can correctly set the pane's id= attribute before it gets
       - registered with ko.widgets.
       -->
    <ko-pane id="pane" class="native" floating="true" flex="1"
             style="-moz-binding: none;"/>
    <script type="application/x-javascript;version=1.8">
        <![CDATA[
            var gPane = null;
            addEventListener("unload", function() {
                gPane._onFloatingPanelHidden();
                gPane = null;
            }, false);
            addEventListener("load", function() {
                const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
                const {Services} = Cu.import("resource://gre/modules/Services.jsm", {});
                try {
                    gPane = document.getElementById("pane");
                    gPane.id = "__komodo_floating_pane__" +
                                window.QueryInterface(Ci.nsIInterfaceRequestor)
                                      .getInterface(Ci.nsIDOMWindowUtils)
                                      .outerWindowID;
                    gPane.style.MozBinding = ""; // Let the XBL binding apply
                    gPane.getBoundingClientRect(); // force XBL binding to load
                    window.arguments[1](gPane);
                } catch (ex) {
                    ko.logging.getLogger("ko.widgets.floating").exception(ex);
                }

                // Steal keys from the main window
                var log = ko.logging.getLogger("ko.widgets.floating");
                var oldKeyset = opener.document.getElementById('widekeyset');
                var newKeyset = document.importNode(oldKeyset, true);
                document.documentElement.appendChild(newKeyset);
                var commandset = document.createElement("commandset");
                document.documentElement.appendChild(commandset);
                 for (let key of newKeyset.querySelectorAll("key[command]")) {
                    let elem = document.createElement("command");
                    elem.setAttribute("id", key.getAttribute("command"));
                    // The <command> element _must_ have an oncommand= attribute
                    // in order to get triggered.  So we use a global function.
                    elem.setAttribute("oncommand", "doProxiedCommand(event)");
                    commandset.appendChild(elem);
                }
            }, false);

            /**
             * Handle a key command from a <key> command by attempting to proxy
             * it to the main Komodo window.
             */
            function doProxiedCommand(event) {
                let command_id = event.target.id;
                let proxy = opener.document.getElementById(command_id);
                if (proxy) {
                    // Prefer using a <command> element in the opener
                    // to dispatch commands
                    proxy.doCommand();
                    return;
                }
                // Didn't find a useful <command> element; try using the
                // command dispatcher system instead.
                let controller = opener.document.commandDispatcher
                                       .getControllerForCommand(command_id);
                if (controller && controller.isCommandEnabled(command_id)) {
                    log.debug("Dispatching " + command_id +
                              " via command dispatcher: " + controller);
                    controller.doCommand(command_id);
                    return;
                }
                log.info("Failed to dispatch command " + command_id +
                         ": couldn't find anything in the main window");
            }
        ]]>
    </script>
    
</window>
