Allow plugin events to be controlled by attributes send on the plugin's embed
element.

This is required (on Windows and Linux) to stop the plugin/NPAPI from swallowing
these events and thus getting drag/drop working correctly in scintilla/scimoz.

Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/content/base/src/nsGkAtomList.h
--- a/content/base/src/nsGkAtomList.h	Mon Sep 24 23:04:32 2012 +0200
+++ b/content/base/src/nsGkAtomList.h	Wed Nov 07 13:32:23 2012 -0800
@@ -1949,12 +1949,19 @@
 GK_ATOM(pixels,     "pixels")
 GK_ATOM(lines,      "lines")
 GK_ATOM(pages,      "pages")
 GK_ATOM(scrollbars, "scrollbars")
 GK_ATOM(other,      "other")
 
+// Komodo additions.
+GK_ATOM(allowIME, "allowIME")
+GK_ATOM(pluginPaintHack, "pluginPaintHack")
+GK_ATOM(pluginAllowsFocusEvents, "pluginAllowsFocusEvents")
+GK_ATOM(pluginHandlesDomEvents, "pluginHandlesDomEvents")
+GK_ATOM(pluginHandlesDragEvents, "pluginHandlesDragEvents")
+
 #ifdef ACCESSIBILITY
 GK_ATOM(alert, "alert")
 GK_ATOM(alertdialog, "alertdialog")
 GK_ATOM(application, "application")
 GK_ATOM(anonid, "anonid")
 GK_ATOM(aria_activedescendant, "aria-activedescendant")
Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/dom/plugins/base/nsPluginInstanceOwner.cpp
--- a/dom/plugins/base/nsPluginInstanceOwner.cpp	Mon Sep 24 23:04:32 2012 +0200
+++ b/dom/plugins/base/nsPluginInstanceOwner.cpp	Wed Nov 07 13:32:23 2012 -0800
@@ -337,6 +337,10 @@
   mPluginWindowVisible = false;
   mPluginDocumentActiveState = true;
   mLastMouseDownButtonType = -1;
+  mScimozPlugin = false;
+  mPluginAllowsFocus = true;
+  mPluginHandlesDomEvents = false;
+  mPluginHandlesDragEvents = false;
 
 #ifdef XP_MACOSX
 #ifndef NP_NO_CARBON
@@ -876,7 +880,7 @@
 }
 
 void nsPluginInstanceOwner::AddToCARefreshTimer() {
-  if (!mInstance) {
+  if (!mInstance || mScimozPlugin) {
     return;
   }
 
@@ -2344,34 +2347,38 @@
     ::CGColorSpaceRelease(mColorProfile);
 #endif
 
-  // unregister context menu listener
-  if (mCXMenuListener) {
-    mCXMenuListener->Destroy(mContent);
-    mCXMenuListener = nullptr;
-  }
-
-  mContent->RemoveEventListener(NS_LITERAL_STRING("focus"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("blur"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseup"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mousedown"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mousemove"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("click"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dblclick"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseover"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseout"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keypress"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keydown"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keyup"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("drop"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("drag"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragenter"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragover"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragleave"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragexit"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragstart"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("draggesture"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragend"), this, true);
+  if (mPluginHandlesDomEvents) {
+    // unregister context menu listener
+    if (mCXMenuListener) {
+      mCXMenuListener->Destroy(mContent);
+      mCXMenuListener = nullptr;
+    }
+
+    mContent->RemoveEventListener(NS_LITERAL_STRING("focus"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("blur"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseup"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mousedown"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mousemove"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("click"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("dblclick"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseover"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseout"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keypress"), this, true);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keydown"), this, true);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keyup"), this, true);
+    if (mPluginHandlesDragEvents) {
+      mContent->RemoveEventListener(NS_LITERAL_STRING("drop"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("drag"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragenter"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragover"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragleave"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragexit"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragstart"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("draggesture"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragend"), this, true);
+    }
+  }
 
 #if MOZ_WIDGET_ANDROID
   RemovePluginView();
@@ -2738,40 +2745,61 @@
     return NS_ERROR_FAILURE;
   }
 
-  // register context menu listener
-  mCXMenuListener = new nsPluginDOMContextMenuListener(aContent);
-
-  mContent->AddEventListener(NS_LITERAL_STRING("focus"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("blur"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseup"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mousedown"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mousemove"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("click"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("dblclick"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseover"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseout"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("keypress"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("keydown"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("keyup"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("drop"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("drag"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragenter"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragover"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragleave"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragexit"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragstart"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("draggesture"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragend"), this, true);
+  if (mContent->AttrValueIs(kNameSpaceID_None,
+                            nsGkAtoms::pluginAllowsFocusEvents,
+                            nsGkAtoms::_false,
+                            eCaseMatters)) {
+    mPluginAllowsFocus = false;
+  }
+
+  if (!mContent->AttrValueIs(kNameSpaceID_None,
+                             nsGkAtoms::pluginHandlesDomEvents,
+                             nsGkAtoms::_false,
+                             eCaseMatters)) {
+    mPluginHandlesDomEvents = true;
+
+    // register context menu listener
+    mCXMenuListener = new nsPluginDOMContextMenuListener(aContent);
+  
+    mContent->AddEventListener(NS_LITERAL_STRING("focus"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("blur"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseup"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mousedown"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mousemove"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("click"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("dblclick"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseover"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseout"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("keypress"), this, true);
+    mContent->AddEventListener(NS_LITERAL_STRING("keydown"), this, true);
+    mContent->AddEventListener(NS_LITERAL_STRING("keyup"), this, true);
+    if (!mContent->AttrValueIs(kNameSpaceID_None,
+                               nsGkAtoms::pluginHandlesDragEvents,
+                               nsGkAtoms::_false,
+                               eCaseMatters)) {
+      // Register drag listener
+      mPluginHandlesDragEvents = true;
+      mContent->AddEventListener(NS_LITERAL_STRING("drop"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("drag"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragenter"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragover"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragleave"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragexit"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragstart"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("draggesture"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragend"), this, true);
+    }
+  }
 
   return NS_OK; 
 }
@@ -2468,6 +2503,14 @@
     return NS_ERROR_FAILURE;
   }
 
+  // Check and set scimoz plugin boolean.
+  const char* mime = nullptr;
+  if (mInstance && NS_SUCCEEDED(mInstance->GetMIMEType(&mime)) && mime &&
+      strcmp(mime, "application/x-scimoz-plugin") == 0)
+  {
+    mScimozPlugin = true;
+  }
+
   bool windowless = false;
   mInstance->IsWindowless(&windowless);
   if (!windowless
Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/dom/plugins/base/nsPluginInstanceOwner.h
--- a/dom/plugins/base/nsPluginInstanceOwner.h	Mon Sep 24 23:04:32 2012 +0200
+++ b/dom/plugins/base/nsPluginInstanceOwner.h	Wed Nov 07 13:32:23 2012 -0800
@@ -254,6 +254,16 @@
   static void ExitFullScreen(jobject view);
 #endif
   
+  bool AllowsFocus()
+  {
+    return mPluginAllowsFocus;
+  }
+
+  bool IsScimozPlugin()
+  {
+    return mScimozPlugin;
+  }
+
 private:
   virtual ~nsPluginInstanceOwner();
 
@@ -310,6 +320,11 @@
   bool                        mPluginWindowVisible;
   bool                        mPluginDocumentActiveState;
 
+  bool                        mScimozPlugin;
+  bool                        mPluginAllowsFocus;
+  bool                        mPluginHandlesDomEvents;
+  bool                        mPluginHandlesDragEvents;
+
 #ifdef XP_MACOSX
   NPEventModel mEventModel;
   // This is a hack! UseAsyncRendering() can incorrectly return false
