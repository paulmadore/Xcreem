Add application-activated notification (Mac) to deal with checkDiskFiles
properly - komodo bug 46101.

Index: /Users/toddw/as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/widget/cocoa/nsToolkit.h
--- a/widget/cocoa/nsToolkit.h	Fri Oct 26 15:51:42 2012 -0700
+++ b/widget/cocoa/nsToolkit.h	Mon Oct 29 10:41:29 2012 -0700
@@ -35,6 +35,9 @@
   void               RegisterForAllProcessMouseEvents();
   void               UnregisterAllProcessMouseEventHandlers();
 
+  void               RegisterForAppFrontEvents();
+  void               UnregisterAppFrontEventHandlers();
+
 protected:
 
   nsresult           RegisterForSleepWakeNotifications();
@@ -46,6 +49,7 @@
 
   CFRunLoopSourceRef mSleepWakeNotificationRLS;
   io_object_t        mPowerNotifier;
+  EventHandlerRef    mAppEventHandler;
 
   CFMachPortRef      mEventTapPort;
   CFRunLoopSourceRef mEventTapRLS;
Index: /Users/toddw/as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/widget/cocoa/nsToolkit.mm
--- a/widget/cocoa/nsToolkit.mm	Fri Oct 26 15:51:42 2012 -0700
+++ b/widget/cocoa/nsToolkit.mm	Mon Oct 29 10:41:12 2012 -0700
@@ -34,6 +34,9 @@
 #include "nsIObserverService.h"
 #include "nsIServiceManager.h"
 
+#include "nsISupportsPrimitives.h"
+ 
+#include "mozilla/Services.h"
 #include "mozilla/Preferences.h"
 
 using namespace mozilla;
@@ -44,11 +47,13 @@
 
 nsToolkit::nsToolkit()
 : mSleepWakeNotificationRLS(nullptr)
+, mAppEventHandler(nullptr)
 , mEventTapPort(nullptr)
 , mEventTapRLS(nullptr)
 {
   MOZ_COUNT_CTOR(nsToolkit);
   RegisterForSleepWakeNotifications();
+  RegisterForAppFrontEvents();
 }
 
 nsToolkit::~nsToolkit()
@@ -56,6 +61,7 @@
   MOZ_COUNT_DTOR(nsToolkit);
   RemoveSleepWakeNotifications();
   UnregisterAllProcessMouseEventHandlers();
+  UnregisterAppFrontEventHandlers();
 }
 
 void
@@ -259,16 +265,96 @@
     CFMachPortInvalidate(mEventTapPort);
     CFRelease(mEventTapPort);
     mEventTapPort = nullptr;
   }
 
   NS_OBJC_END_TRY_ABORT_BLOCK;
 }
 
+static OSStatus AppEventHandler(EventHandlerCallRef inHandlerCallRef, EventRef inEvent, void* inUserData)
+{
+  OSStatus result = eventNotHandledErr;
+
+  NS_OBJC_BEGIN_TRY_ABORT_BLOCK;
+
+  UInt32 eventClass = GetEventClass(inEvent);
+  UInt32 eventKind = GetEventKind(inEvent);
+
+  // We only handle active app chnaged events...
+  if ((eventClass == kEventClassApplication) && (eventKind == kEventAppFrontSwitched))
+  {
+    ProcessSerialNumber fp;
+    ProcessSerialNumber psn;
+    result = ::GetCurrentProcess(&psn);
+    if (result != noErr)
+        return result;
+
+    // Get the new process ID out
+    if (GetEventParameter(inEvent, kEventParamProcessID,
+                          typeProcessSerialNumber, NULL,
+                          sizeof(ProcessSerialNumber), NULL,
+                          &fp) == noErr)
+    {
+      bool samePsn = psn.lowLongOfPSN == fp.lowLongOfPSN &&
+                      psn.highLongOfPSN == fp.highLongOfPSN;
+      nsCOMPtr<nsISupportsPRBool> focusing =
+        do_CreateInstance(NS_SUPPORTS_PRBOOL_CONTRACTID);
+      focusing->SetData(samePsn);
+
+      nsCOMPtr<nsIObserverService> obsServ =
+        mozilla::services::GetObserverService();
+      obsServ->NotifyObservers(focusing, "application-activated", nullptr);
+    }
+    
+    // Tell the dispatcher that we handled the event...
+    result = noErr;
+  }
+  NS_OBJC_END_TRY_ABORT_BLOCK;
+
+  return result;
+}
+
+
+void
+nsToolkit::RegisterForAppFrontEvents()
+{
+  NS_OBJC_BEGIN_TRY_ABORT_BLOCK;
+
+  if (!mAppEventHandler) {
+    EventTypeSpec kAppEventList[] = {
+      { kEventClassApplication, kEventAppFrontSwitched },
+    };
+    
+    InstallApplicationEventHandler(
+            NewEventHandlerUPP(AppEventHandler),
+            GetEventTypeCount(kAppEventList),
+            kAppEventList,
+            0,
+            &mAppEventHandler);
+    
+  }
+
+  NS_OBJC_END_TRY_ABORT_BLOCK;
+}
+
+
+void
+nsToolkit::UnregisterAppFrontEventHandlers()
+{
+  NS_OBJC_BEGIN_TRY_ABORT_BLOCK;
+
+  if (mAppEventHandler) {
+    ::RemoveEventHandler(mAppEventHandler);
+    mAppEventHandler = nullptr;
+  }
+
+  NS_OBJC_END_TRY_ABORT_BLOCK;
+}
+
 // Return the nsToolkit instance.  If a toolkit does not yet exist, then one
 // will be created.
 // static
 nsToolkit* nsToolkit::GetToolkit()
 {
   NS_OBJC_BEGIN_TRY_ABORT_BLOCK_RETURN;
 
   if (!gToolkit) {
